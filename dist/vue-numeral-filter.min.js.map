{"version":3,"file":"index.umd.min.js","sources":["../node_modules/numeral-v2/numeral.js","../src/filters.js","../node_modules/numeral-v2/locales.js","../src/index.js"],"sourcesContent":["/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = locales[numeral.options.currentLocale].hasOwnProperty('trillion')?locale.trillion:1000000000000,\n                billion = locales[numeral.options.currentLocale].hasOwnProperty('billion')?locale.billion:1000000000,\n                million = locales[numeral.options.currentLocale].hasOwnProperty('million')?locale.million:1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr.trim() !== locale.abbreviations.trillion.trim()) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(locale.regex || /(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n                // int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = locale.hasOwnProperty('abbreviations_detail') ? locale.abbreviations_detail : {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","import numeral from 'numeral-v2';\n\nconst abbreviate = value => numeral(value).format('0.0a');\n\nconst bytes = value => numeral(value).format('0 b')\n\nconst exposedNumeral = (value, format) => numeral(value).format(format);\n\nconst exponential = value => numeral(value).format('0.[00]e+0');\n\nconst ordinal = value => numeral(value).format('Oo');\n\nconst percentage = value => numeral(value).format( '0.[00]%');\n\nconst separator = value => numeral(value).format('0,0');\n\nconst currency = value => numeral(value).format('$0,0.00');\n\nexport {\n    abbreviate,\n    bytes,\n    exponential,\n    exposedNumeral,\n    ordinal,\n    percentage,\n    separator,\n    currency\n};\n","/*! @preserve\n * numeral.js\n * locales : 2.0.6\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(['numeral'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        factory(require('./numeral'));\n    } else {\n        factory(global.numeral);\n    }\n}(this, function (numeral) {\n    \n(function() {\n        numeral.register('locale', 'bg', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: { // I found these here http://www.unicode.org/cldr/charts/28/verify/numbers/bg.html\n            thousand: 'хил',\n            million: 'млн',\n            billion: 'млрд',\n            trillion: 'трлн'\n        },\n        ordinal: function (number) {\n            // google translate suggests:\n            // 1st=1-ви; 2nd=2-ри; 7th=7-ми;\n            // 8th=8-ми and many others end with -ти\n            // for example 3rd=3-ти\n            // However since I've seen suggestions that in\n            // Bulgarian the ordinal can be taken in\n            // different forms (masculine, feminine, neuter)\n            // I've opted to wimp out on commiting that to code\n            return '';\n        },\n        currency: {\n            symbol: 'лв'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'bs', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: { // I found these here http://www.unicode.org/cldr/charts/28/verify/numbers/hr.html\n            thousand: 'tis',\n            million: 'mil',\n            billion: 'mlr',\n            trillion: 'bil'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'kn'\n        }\n    });\n})();\n\n\n(function() {\n    \n    numeral.register('locale', 'chs', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: '千',\n            million: '百万',\n            billion: '十亿',\n            trillion: '兆'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '¥'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'cs', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'tis.',\n            million: 'mil.',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: 'Kč'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'da-dk', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mio',\n            billion: 'mia',\n            trillion: 'b'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'DKK'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'de-ch', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'CHF'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'de', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'en-au', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'en-gb', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '£'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'in', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        trillion: 10000000,\n        billion: 999999999999999,\n        million: 100000,\n        regex: /(\\d)(?=(\\d\\d)+\\d$)/g,\n        abbreviations: {\n            thousand: 'k',\n            million: 'L',\n            billion: 'a',\n            trillion: 'Cr'\n        },\n        abbreviations_detail: {\n            thousand: 2,\n            million: 5,\n            billion: 25,\n            trillion: 7\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                    (b === 2) ? 'nd' :\n                        (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '\\u20B9'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'en-za', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (~~ (number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                    (b === 2) ? 'nd' :\n                        (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: 'R'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'es-es', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (b === 1 || b === 3) ? 'er' :\n                (b === 2) ? 'do' :\n                    (b === 7 || b === 0) ? 'mo' :\n                        (b === 8) ? 'vo' :\n                            (b === 9) ? 'no' : 'to';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'es', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            var b = number % 10;\n            return (b === 1 || b === 3) ? 'er' :\n                (b === 2) ? 'do' :\n                (b === 7 || b === 0) ? 'mo' :\n\t\t(b === 8) ? 'vo' :\n\t\t(b === 9) ? 'no' : 'to';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'et', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: ' tuh',\n            million: ' mln',\n            billion: ' mld',\n            trillion: ' trl'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fi', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'M',\n            billion: 'G',\n            trillion: 'T'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fr-ca', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'M',\n            billion: 'G',\n            trillion: 'T'\n        },\n        ordinal : function (number) {\n            return number === 1 ? 'er' : 'e';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fr-ch', {\n        delimiters: {\n            thousands: '\\'',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal : function (number) {\n            return number === 1 ? 'er' : 'e';\n        },\n        currency: {\n            symbol: 'CHF'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'fr', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal : function (number) {\n            return number === 1 ? 'er' : 'e';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'hr', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: { // I found these here http://www.unicode.org/cldr/charts/28/verify/numbers/hr.html\n            thousand: 'tis',\n            million: 'mil',\n            billion: 'mlr',\n            trillion: 'bil'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'kn'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'hu', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'E',  // ezer\n            million: 'M',   // millió\n            billion: 'Mrd', // milliárd\n            trillion: 'T'   // trillió\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: ' Ft'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'it', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'mila',\n            million: 'mil',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return 'º';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ja', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: '千',\n            million: '百万',\n            billion: '十億',\n            trillion: '兆'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '¥'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'lv', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: ' tūkst.',\n            million: ' milj.',\n            billion: ' mljrd.',\n            trillion: ' trilj.'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'nl-be', {\n        delimiters: {\n            thousands: ' ',\n            decimal  : ','\n        },\n        abbreviations: {\n            thousand : 'k',\n            million  : ' mln',\n            billion  : ' mld',\n            trillion : ' bln'\n        },\n        ordinal : function (number) {\n            var remainder = number % 100;\n\n            return (number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20) ? 'ste' : 'de';\n        },\n        currency: {\n            symbol: '€ '\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'nl-nl', {\n        delimiters: {\n            thousands: '.',\n            decimal  : ','\n        },\n        abbreviations: {\n            thousand : 'k',\n            million  : 'mln',\n            billion  : 'mrd',\n            trillion : 'bln'\n        },\n        ordinal : function (number) {\n            var remainder = number % 100;\n            return (number !== 0 && remainder <= 1 || remainder === 8 || remainder >= 20) ? 'ste' : 'de';\n        },\n        currency: {\n            symbol: '€ '\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'no', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'kr'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'pl', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'tys.',\n            million: 'mln',\n            billion: 'mld',\n            trillion: 'bln'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'PLN'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'pt-br', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'mil',\n            million: 'milhões',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function (number) {\n            return 'º';\n        },\n        currency: {\n            symbol: 'R$'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'pt-pt', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal : function (number) {\n            return 'º';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ro', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: { // I found these here http://www.unicode.org/cldr/charts/28/verify/numbers/ro.html\n            thousand: 'K',\n            million: 'mil',\n            billion: 'mld',\n            trillion: 'tril'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'L'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ru-ua', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'тыс.',\n            million: 'млн',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function () {\n            // not ideal, but since in Russian it can taken on\n            // different forms (masculine, feminine, neuter)\n            // this is all we can do\n            return '.';\n        },\n        currency: {\n            symbol: '\\u20B4'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'ru', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'тыс.',\n            million: 'млн.',\n            billion: 'млрд.',\n            trillion: 'трлн.'\n        },\n        ordinal: function () {\n            // not ideal, but since in Russian it can taken on\n            // different forms (masculine, feminine, neuter)\n            // this is all we can do\n            return '.';\n        },\n        currency: {\n            symbol: 'руб.'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'sk', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'tis.',\n            million: 'mil.',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'sl', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'mio',\n            billion: 'mrd',\n            trillion: 'trilijon'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: '€'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'sr', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: { // I found these here http://www.unicode.org/cldr/charts/28/verify/numbers/sr.html\n            thousand: 'хиљ',\n            million: 'мил',\n            billion: 'млрд',\n            trillion: 'бил'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: 'DIN'\n        }\n    });\n})();\n\n\n(function() {\n    \n\n    numeral.register('locale', 'th', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'พัน',\n            million: 'ล้าน',\n            billion: 'พันล้าน',\n            trillion: 'ล้านล้าน'\n        },\n        ordinal: function (number) {\n            return '.';\n        },\n        currency: {\n            symbol: '฿'\n        }\n    });\n})();\n\n\n(function() {\n        var suffixes = {\n            1: '\\'inci',\n            5: '\\'inci',\n            8: '\\'inci',\n            70: '\\'inci',\n            80: '\\'inci',\n\n            2: '\\'nci',\n            7: '\\'nci',\n            20: '\\'nci',\n            50: '\\'nci',\n\n            3: '\\'üncü',\n            4: '\\'üncü',\n            100: '\\'üncü',\n\n            6: '\\'ncı',\n\n            9: '\\'uncu',\n            10: '\\'uncu',\n            30: '\\'uncu',\n\n            60: '\\'ıncı',\n            90: '\\'ıncı'\n        };\n\n    numeral.register('locale', 'tr', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'bin',\n            million: 'milyon',\n            billion: 'milyar',\n            trillion: 'trilyon'\n        },\n        ordinal: function (number) {\n            if (number === 0) {  // special case for zero\n                return '\\'ıncı';\n            }\n\n            var a = number % 10,\n                b = number % 100 - a,\n                c = number >= 100 ? 100 : null;\n\n          return suffixes[a] || suffixes[b] || suffixes[c];\n        },\n        currency: {\n            symbol: '\\u20BA'\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('locale', 'uk-ua', {\n        delimiters: {\n            thousands: ' ',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: 'тис.',\n            million: 'млн',\n            billion: 'млрд',\n            trillion: 'блн'\n        },\n        ordinal: function () {\n            // not ideal, but since in Ukrainian it can taken on\n            // different forms (masculine, feminine, neuter)\n            // this is all we can do\n            return '';\n        },\n        currency: {\n            symbol: '\\u20B4'\n        }\n    });\n})();\n\n\n(function() {\n    \n    numeral.register('locale', 'vi', {\n        delimiters: {\n            thousands: '.',\n            decimal: ','\n        },\n        abbreviations: {\n            thousand: ' nghìn',\n            million: ' triệu',\n            billion: ' tỷ',\n            trillion: ' nghìn tỷ'\n        },\n        ordinal: function () {\n            return '.';\n        },\n        currency: {\n            symbol: '₫'\n        }\n    });\n})();\n\n\n}));\n","import numeral from 'numeral-v2';\nimport 'numeral-v2/locales';\n\nimport {\n    abbreviate,\n    bytes,\n    exponential,\n    exposedNumeral,\n    ordinal,\n    percentage,\n    separator,\n    currency\n} from './filters.js';\n\nconst vueNumeralFilterInstaller = {\n    install: (app, options = {locale: 'en-gb'}) => {\n        numeral.locale(options.locale);\n        app.config.globalProperties.$filters = {\n            abbreviate,\n            bytes,\n            exponential,\n            numeral: exposedNumeral,\n            ordinal,\n            percentage,\n            separator,\n            currency\n        };\n    }\n};\n\nexport default vueNumeralFilterInstaller;\n\n"],"names":["global","factory","module","exports","numeral","this","_","decimal","binary","unformatRegex","formats","locales","defaults","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","options","Numeral","input","number","_input","_value","value","kind","unformatFunction","regexp","isNumeral","isNaN","replace","length","regexps","unformat","match","stringToNumber","Number","version","obj","numberToFormat","format","roundingFunction","leadingCount","abbrForce","abs","int","precision","signed","thousands","output","locale","negP","optDec","abbr","trillion","hasOwnProperty","billion","million","neg","Math","includes","indexOf","RegExp","abbreviations","thousand","toString","split","toFixed","delimiters","slice","trim","String","i","regex","string","abbreviation","stringOriginal","abbreviations_detail","currency","symbol","pow","min","search","insert","subString","start","reduce","array","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","args","Array","prototype","call","accum","next","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","max","key","toLowerCase","localeData","Error","reset","property","register","type","name","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","e","substr","fn","clone","inputString","formatFunction","round","set","add","corrFactor","curr","currI","O","subtract","multiply","divide","difference","ordinal","b","space","splice","join","base","suffixes","concat","filter","item","bytes","suffix","bytesMultiplier","symbols","before","after","toExponential","hours","floor","minutes","seconds","timeArray","abbreviate","require$$0","remainder","1","5","8","70","80","2","7","20","50","3","4","100","6","9","10","30","60","90","a","exposedNumeral","exponential","percentage","separator","install","app","config","globalProperties","$filters"],"mappings":"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"}